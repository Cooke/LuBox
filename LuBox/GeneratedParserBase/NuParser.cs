//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Development\LuBox\LuBox.Parser\Nu.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace LuBox.Parser {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class NuParser : Parser {
	public const int
		T__50=1, T__49=2, T__48=3, T__47=4, T__46=5, T__45=6, T__44=7, T__43=8, 
		T__42=9, T__41=10, T__40=11, T__39=12, T__38=13, T__37=14, T__36=15, T__35=16, 
		T__34=17, T__33=18, T__32=19, T__31=20, T__30=21, T__29=22, T__28=23, 
		T__27=24, T__26=25, T__25=26, T__24=27, T__23=28, T__22=29, T__21=30, 
		T__20=31, T__19=32, T__18=33, T__17=34, T__16=35, T__15=36, T__14=37, 
		T__13=38, T__12=39, T__11=40, T__10=41, T__9=42, T__8=43, T__7=44, T__6=45, 
		T__5=46, T__4=47, T__3=48, T__2=49, T__1=50, T__0=51, NAME=52, NORMALSTRING=53, 
		CHARSTRING=54, LONGSTRING=55, INT=56, HEX=57, FLOAT=58, HEX_FLOAT=59, 
		COMMENT=60, LINE_COMMENT=61, WS=62, SHEBANG=63;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'local'", "'*'", "'or'", "'['", "'<'", "'false'", "'<='", 
		"'nil'", "'}'", "'do'", "'%'", "')'", "'::'", "'='", "'goto'", "'repeat'", 
		"'..'", "']'", "'in'", "','", "'-'", "'while'", "'not'", "'('", "':'", 
		"'if'", "'until'", "'~='", "'{'", "'...'", "'and'", "'break'", "'else'", 
		"'true'", "'elseif'", "'?:'", "'^'", "'function'", "'.'", "'+'", "'?.'", 
		"'for'", "'return'", "';'", "'>'", "'then'", "'/'", "'=='", "'#'", "'>='", 
		"'end'", "NAME", "NORMALSTRING", "CHARSTRING", "LONGSTRING", "INT", "HEX", 
		"FLOAT", "HEX_FLOAT", "COMMENT", "LINE_COMMENT", "WS", "SHEBANG"
	};
	public const int
		RULE_chunk = 0, RULE_block = 1, RULE_stat = 2, RULE_retstat = 3, RULE_label = 4, 
		RULE_funcname = 5, RULE_varlist = 6, RULE_namelist = 7, RULE_explist = 8, 
		RULE_exp = 9, RULE_var = 10, RULE_prefixexp = 11, RULE_functioncall = 12, 
		RULE_varOrExp = 13, RULE_nameAndArgs = 14, RULE_varSuffix = 15, RULE_args = 16, 
		RULE_functiondef = 17, RULE_funcbody = 18, RULE_parlist = 19, RULE_tableconstructor = 20, 
		RULE_fieldlist = 21, RULE_field = 22, RULE_fieldsep = 23, RULE_operatorOr = 24, 
		RULE_operatorAnd = 25, RULE_operatorComparison = 26, RULE_operatorStrcat = 27, 
		RULE_operatorAddSub = 28, RULE_operatorMulDivMod = 29, RULE_operatorUnary = 30, 
		RULE_operatorPower = 31, RULE_dotOrQuestionMarkDot = 32, RULE_colonOrQuestionMarkColon = 33, 
		RULE_number = 34, RULE_string = 35;
	public static readonly string[] ruleNames = {
		"chunk", "block", "stat", "retstat", "label", "funcname", "varlist", "namelist", 
		"explist", "exp", "var", "prefixexp", "functioncall", "varOrExp", "nameAndArgs", 
		"varSuffix", "args", "functiondef", "funcbody", "parlist", "tableconstructor", 
		"fieldlist", "field", "fieldsep", "operatorOr", "operatorAnd", "operatorComparison", 
		"operatorStrcat", "operatorAddSub", "operatorMulDivMod", "operatorUnary", 
		"operatorPower", "dotOrQuestionMarkDot", "colonOrQuestionMarkColon", "number", 
		"string"
	};

	public override string GrammarFileName { get { return "Nu.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public NuParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ChunkContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(NuParser.Eof, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		 {
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterChunk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitChunk(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_chunk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; block();
			State = 73; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public IReadOnlyList<StatContext> stat() {
			return GetRuleContexts<StatContext>();
		}
		public RetstatContext retstat() {
			return GetRuleContext<RetstatContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__50) | (1L << T__41) | (1L << T__38) | (1L << T__36) | (1L << T__35) | (1L << T__29) | (1L << T__27) | (1L << T__25) | (1L << T__19) | (1L << T__13) | (1L << T__9) | (1L << T__7) | (1L << NAME))) != 0)) {
				{
				{
				State = 75; stat();
				}
				}
				State = 80;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 82;
			_la = _input.La(1);
			if (_la==T__8) {
				{
				State = 81; retstat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public IReadOnlyList<ExpContext> exp() {
			return GetRuleContexts<ExpContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(NuParser.NAME, 0); }
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		public IReadOnlyList<BlockContext> block() {
			return GetRuleContexts<BlockContext>();
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_stat);
		int _la;
		try {
			State = 165;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 84; Match(T__7);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 85; varlist();
				State = 86; Match(T__37);
				State = 87; explist();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89; functioncall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 90; label();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 91; Match(T__19);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 92; Match(T__36);
				State = 93; Match(NAME);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 94; Match(T__41);
				State = 95; block();
				State = 96; Match(T__0);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 98; Match(T__29);
				State = 99; exp(0);
				State = 100; Match(T__41);
				State = 101; block();
				State = 102; Match(T__0);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 104; Match(T__35);
				State = 105; block();
				State = 106; Match(T__24);
				State = 107; exp(0);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 109; Match(T__25);
				State = 110; exp(0);
				State = 111; Match(T__5);
				State = 112; block();
				State = 120;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__16) {
					{
					{
					State = 113; Match(T__16);
					State = 114; exp(0);
					State = 115; Match(T__5);
					State = 116; block();
					}
					}
					State = 122;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 125;
				_la = _input.La(1);
				if (_la==T__18) {
					{
					State = 123; Match(T__18);
					State = 124; block();
					}
				}

				State = 127; Match(T__0);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 129; Match(T__9);
				State = 130; Match(NAME);
				State = 131; Match(T__37);
				State = 132; exp(0);
				State = 133; Match(T__31);
				State = 134; exp(0);
				State = 137;
				_la = _input.La(1);
				if (_la==T__31) {
					{
					State = 135; Match(T__31);
					State = 136; exp(0);
					}
				}

				State = 139; Match(T__41);
				State = 140; block();
				State = 141; Match(T__0);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 143; Match(T__9);
				State = 144; namelist();
				State = 145; Match(T__32);
				State = 146; explist();
				State = 147; Match(T__41);
				State = 148; block();
				State = 149; Match(T__0);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 151; Match(T__13);
				State = 152; funcname();
				State = 153; funcbody();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 155; Match(T__50);
				State = 156; Match(T__13);
				State = 157; Match(NAME);
				State = 158; funcbody();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 159; Match(T__50);
				State = 160; namelist();
				State = 163;
				_la = _input.La(1);
				if (_la==T__37) {
					{
					State = 161; Match(T__37);
					State = 162; explist();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetstatContext : ParserRuleContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public RetstatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retstat; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterRetstat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitRetstat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetstat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetstatContext retstat() {
		RetstatContext _localctx = new RetstatContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_retstat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(T__8);
			State = 169;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__45) | (1L << T__43) | (1L << T__30) | (1L << T__28) | (1L << T__27) | (1L << T__22) | (1L << T__21) | (1L << T__17) | (1L << T__13) | (1L << T__2) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
				{
				State = 168; explist();
				}
			}

			State = 172;
			_la = _input.La(1);
			if (_la==T__7) {
				{
				State = 171; Match(T__7);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(NuParser.NAME, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(T__38);
			State = 175; Match(NAME);
			State = 176; Match(T__38);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		public ITerminalNode NAME(int i) {
			return GetToken(NuParser.NAME, i);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(NuParser.NAME); }
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterFuncname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitFuncname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_funcname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(NAME);
			State = 183;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__12) {
				{
				{
				State = 179; Match(T__12);
				State = 180; Match(NAME);
				}
				}
				State = 185;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 188;
			_la = _input.La(1);
			if (_la==T__26) {
				{
				State = 186; Match(T__26);
				State = 187; Match(NAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public IReadOnlyList<VarContext> var() {
			return GetRuleContexts<VarContext>();
		}
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterVarlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitVarlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_varlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; var();
			State = 195;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__31) {
				{
				{
				State = 191; Match(T__31);
				State = 192; var();
				}
				}
				State = 197;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistContext : ParserRuleContext {
		public ITerminalNode NAME(int i) {
			return GetToken(NuParser.NAME, i);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(NuParser.NAME); }
		public NamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterNamelist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitNamelist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamelistContext namelist() {
		NamelistContext _localctx = new NamelistContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_namelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; Match(NAME);
			State = 203;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 199; Match(T__31);
					State = 200; Match(NAME);
					}
					} 
				}
				State = 205;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		public IReadOnlyList<ExpContext> exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterExplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitExplist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_explist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; exp(0);
			State = 211;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__31) {
				{
				{
				State = 207; Match(T__31);
				State = 208; exp(0);
				}
				}
				State = 213;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public OperatorAndContext operatorAnd() {
			return GetRuleContext<OperatorAndContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		public IReadOnlyList<ExpContext> exp() {
			return GetRuleContexts<ExpContext>();
		}
		public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		public OperatorPowerContext operatorPower() {
			return GetRuleContext<OperatorPowerContext>(0);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		public OperatorStrcatContext operatorStrcat() {
			return GetRuleContext<OperatorStrcatContext>(0);
		}
		public FunctiondefContext functiondef() {
			return GetRuleContext<FunctiondefContext>(0);
		}
		public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		public OperatorOrContext operatorOr() {
			return GetRuleContext<OperatorOrContext>(0);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(_ctx, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			switch (_input.La(1)) {
			case T__30:
			case T__28:
			case T__2:
				{
				State = 215; operatorUnary();
				State = 216; exp(7);
				}
				break;
			case T__43:
				{
				State = 218; Match(T__43);
				}
				break;
			case T__45:
				{
				State = 219; Match(T__45);
				}
				break;
			case T__17:
				{
				State = 220; Match(T__17);
				}
				break;
			case INT:
			case HEX:
			case FLOAT:
			case HEX_FLOAT:
				{
				State = 221; number();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				{
				State = 222; @string();
				}
				break;
			case T__21:
				{
				State = 223; Match(T__21);
				}
				break;
			case T__13:
				{
				State = 224; functiondef();
				}
				break;
			case T__27:
			case NAME:
				{
				State = 225; prefixexp();
				}
				break;
			case T__22:
				{
				State = 226; tableconstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 259;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 257;
					switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
					case 1:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 229;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 230; operatorPower();
						State = 231; exp(8);
						}
						break;

					case 2:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 233;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 234; operatorMulDivMod();
						State = 235; exp(7);
						}
						break;

					case 3:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 237;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 238; operatorAddSub();
						State = 239; exp(6);
						}
						break;

					case 4:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 241;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 242; operatorStrcat();
						State = 243; exp(4);
						}
						break;

					case 5:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 245;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 246; operatorComparison();
						State = 247; exp(4);
						}
						break;

					case 6:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 249;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 250; operatorAnd();
						State = 251; exp(3);
						}
						break;

					case 7:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 253;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 254; operatorOr();
						State = 255; exp(2);
						}
						break;
					}
					} 
				}
				State = 261;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public IReadOnlyList<VarSuffixContext> varSuffix() {
			return GetRuleContexts<VarSuffixContext>();
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarSuffixContext varSuffix(int i) {
			return GetRuleContext<VarSuffixContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(NuParser.NAME, 0); }
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_var);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			switch (_input.La(1)) {
			case NAME:
				{
				State = 262; Match(NAME);
				}
				break;
			case T__27:
				{
				State = 263; Match(T__27);
				State = 264; exp(0);
				State = 265; Match(T__39);
				State = 266; varSuffix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 273;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 270; varSuffix();
					}
					} 
				}
				State = 275;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixexpContext : ParserRuleContext {
		public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		public IReadOnlyList<NameAndArgsContext> nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public PrefixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterPrefixexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitPrefixexp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixexpContext prefixexp() {
		PrefixexpContext _localctx = new PrefixexpContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_prefixexp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; varOrExp();
			State = 280;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 277; nameAndArgs();
					}
					} 
				}
				State = 282;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		public IReadOnlyList<NameAndArgsContext> nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterFunctioncall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitFunctioncall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_functioncall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; varOrExp();
			State = 285;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 284; nameAndArgs();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 287;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrExpContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public VarOrExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterVarOrExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitVarOrExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrExpContext varOrExp() {
		VarOrExpContext _localctx = new VarOrExpContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_varOrExp);
		try {
			State = 294;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 289; var();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 290; Match(T__27);
				State = 291; exp(0);
				State = 292; Match(T__39);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameAndArgsContext : ParserRuleContext {
		public ColonOrQuestionMarkColonContext colonOrQuestionMarkColon() {
			return GetRuleContext<ColonOrQuestionMarkColonContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(NuParser.NAME, 0); }
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public NameAndArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameAndArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterNameAndArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitNameAndArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameAndArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameAndArgsContext nameAndArgs() {
		NameAndArgsContext _localctx = new NameAndArgsContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_nameAndArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			_la = _input.La(1);
			if (_la==T__26 || _la==T__15) {
				{
				State = 296; colonOrQuestionMarkColon();
				State = 297; Match(NAME);
				}
			}

			State = 301; args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSuffixContext : ParserRuleContext {
		public DotOrQuestionMarkDotContext dotOrQuestionMarkDot() {
			return GetRuleContext<DotOrQuestionMarkDotContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public IReadOnlyList<NameAndArgsContext> nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public ITerminalNode NAME() { return GetToken(NuParser.NAME, 0); }
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public VarSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterVarSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitVarSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarSuffixContext varSuffix() {
		VarSuffixContext _localctx = new VarSuffixContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_varSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__27) | (1L << T__26) | (1L << T__22) | (1L << T__15) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) {
				{
				{
				State = 303; nameAndArgs();
				}
				}
				State = 308;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 316;
			switch (_input.La(1)) {
			case T__47:
				{
				State = 309; Match(T__47);
				State = 310; exp(0);
				State = 311; Match(T__33);
				}
				break;
			case T__12:
			case T__10:
				{
				State = 313; dotOrQuestionMarkDot();
				State = 314; Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_args);
		int _la;
		try {
			State = 325;
			switch (_input.La(1)) {
			case T__27:
				EnterOuterAlt(_localctx, 1);
				{
				State = 318; Match(T__27);
				State = 320;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__45) | (1L << T__43) | (1L << T__30) | (1L << T__28) | (1L << T__27) | (1L << T__22) | (1L << T__21) | (1L << T__17) | (1L << T__13) | (1L << T__2) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
					{
					State = 319; explist();
					}
				}

				State = 322; Match(T__39);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 323; tableconstructor();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 324; @string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefContext : ParserRuleContext {
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondef; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterFunctiondef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitFunctiondef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefContext functiondef() {
		FunctiondefContext _localctx = new FunctiondefContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327; Match(T__13);
			State = 328; funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncbodyContext : ParserRuleContext {
		public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FuncbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcbody; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterFuncbody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitFuncbody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncbodyContext funcbody() {
		FuncbodyContext _localctx = new FuncbodyContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_funcbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(T__27);
			State = 332;
			_la = _input.La(1);
			if (_la==T__21 || _la==NAME) {
				{
				State = 331; parlist();
				}
			}

			State = 334; Match(T__39);
			State = 335; block();
			State = 336; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParlistContext : ParserRuleContext {
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ParlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterParlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitParlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParlistContext parlist() {
		ParlistContext _localctx = new ParlistContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_parlist);
		int _la;
		try {
			State = 344;
			switch (_input.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 338; namelist();
				State = 341;
				_la = _input.La(1);
				if (_la==T__31) {
					{
					State = 339; Match(T__31);
					State = 340; Match(T__21);
					}
				}

				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343; Match(T__21);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstructorContext : ParserRuleContext {
		public FieldlistContext fieldlist() {
			return GetRuleContext<FieldlistContext>(0);
		}
		public TableconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterTableconstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitTableconstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableconstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableconstructorContext tableconstructor() {
		TableconstructorContext _localctx = new TableconstructorContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_tableconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346; Match(T__22);
			State = 348;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__47) | (1L << T__45) | (1L << T__43) | (1L << T__30) | (1L << T__28) | (1L << T__27) | (1L << T__22) | (1L << T__21) | (1L << T__17) | (1L << T__13) | (1L << T__2) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
				{
				State = 347; fieldlist();
				}
			}

			State = 350; Match(T__42);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		public IReadOnlyList<FieldsepContext> fieldsep() {
			return GetRuleContexts<FieldsepContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public IReadOnlyList<FieldContext> field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldsepContext fieldsep(int i) {
			return GetRuleContext<FieldsepContext>(i);
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterFieldlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitFieldlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_fieldlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 352; field();
			State = 358;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 353; fieldsep();
					State = 354; field();
					}
					} 
				}
				State = 360;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			State = 362;
			_la = _input.La(1);
			if (_la==T__31 || _la==T__7) {
				{
				State = 361; fieldsep();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public IReadOnlyList<ExpContext> exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ITerminalNode NAME() { return GetToken(NuParser.NAME, 0); }
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_field);
		try {
			State = 374;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 364; Match(T__47);
				State = 365; exp(0);
				State = 366; Match(T__33);
				State = 367; Match(T__37);
				State = 368; exp(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 370; Match(NAME);
				State = 371; Match(T__37);
				State = 372; exp(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 373; exp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsepContext : ParserRuleContext {
		public FieldsepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsep; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterFieldsep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitFieldsep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldsep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsepContext fieldsep() {
		FieldsepContext _localctx = new FieldsepContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_fieldsep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			_la = _input.La(1);
			if ( !(_la==T__31 || _la==T__7) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOrContext : ParserRuleContext {
		public OperatorOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterOperatorOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitOperatorOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOrContext operatorOr() {
		OperatorOrContext _localctx = new OperatorOrContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_operatorOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378; Match(T__48);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAndContext : ParserRuleContext {
		public OperatorAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterOperatorAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitOperatorAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAndContext operatorAnd() {
		OperatorAndContext _localctx = new OperatorAndContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_operatorAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterOperatorComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitOperatorComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__46) | (1L << T__44) | (1L << T__23) | (1L << T__6) | (1L << T__3) | (1L << T__1))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorStrcatContext : ParserRuleContext {
		public OperatorStrcatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorStrcat; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterOperatorStrcat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitOperatorStrcat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorStrcat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorStrcatContext operatorStrcat() {
		OperatorStrcatContext _localctx = new OperatorStrcatContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_operatorStrcat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; Match(T__34);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			_la = _input.La(1);
			if ( !(_la==T__30 || _la==T__11) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__49) | (1L << T__40) | (1L << T__4))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterOperatorUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitOperatorUnary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__30) | (1L << T__28) | (1L << T__2))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorPowerContext : ParserRuleContext {
		public OperatorPowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorPower; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterOperatorPower(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitOperatorPower(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorPowerContext operatorPower() {
		OperatorPowerContext _localctx = new OperatorPowerContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_operatorPower);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotOrQuestionMarkDotContext : ParserRuleContext {
		public DotOrQuestionMarkDotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotOrQuestionMarkDot; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterDotOrQuestionMarkDot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitDotOrQuestionMarkDot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotOrQuestionMarkDot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotOrQuestionMarkDotContext dotOrQuestionMarkDot() {
		DotOrQuestionMarkDotContext _localctx = new DotOrQuestionMarkDotContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_dotOrQuestionMarkDot);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			_la = _input.La(1);
			if ( !(_la==T__12 || _la==T__10) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColonOrQuestionMarkColonContext : ParserRuleContext {
		public ColonOrQuestionMarkColonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colonOrQuestionMarkColon; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterColonOrQuestionMarkColon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitColonOrQuestionMarkColon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColonOrQuestionMarkColon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColonOrQuestionMarkColonContext colonOrQuestionMarkColon() {
		ColonOrQuestionMarkColonContext _localctx = new ColonOrQuestionMarkColonContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_colonOrQuestionMarkColon);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			_la = _input.La(1);
			if ( !(_la==T__26 || _la==T__15) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode FLOAT() { return GetToken(NuParser.FLOAT, 0); }
		public ITerminalNode INT() { return GetToken(NuParser.INT, 0); }
		public ITerminalNode HEX_FLOAT() { return GetToken(NuParser.HEX_FLOAT, 0); }
		public ITerminalNode HEX() { return GetToken(NuParser.HEX, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode LONGSTRING() { return GetToken(NuParser.LONGSTRING, 0); }
		public ITerminalNode NORMALSTRING() { return GetToken(NuParser.NORMALSTRING, 0); }
		public ITerminalNode CHARSTRING() { return GetToken(NuParser.CHARSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 8);

		case 1: return Precpred(_ctx, 6);

		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 4);

		case 4: return Precpred(_ctx, 3);

		case 5: return Precpred(_ctx, 2);

		case 6: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x41\x195\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x3\x2\x3\x2\x3\x2\x3\x3\a\x3O\n\x3\f"+
		"\x3\xE\x3R\v\x3\x3\x3\x5\x3U\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4y\n\x4\f\x4\xE\x4|\v\x4\x3\x4\x3\x4"+
		"\x5\x4\x80\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x5\x4\x8C\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\xA6\n\x4\x5\x4\xA8\n\x4\x3\x5\x3\x5"+
		"\x5\x5\xAC\n\x5\x3\x5\x5\x5\xAF\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a"+
		"\x3\a\a\a\xB8\n\a\f\a\xE\a\xBB\v\a\x3\a\x3\a\x5\a\xBF\n\a\x3\b\x3\b\x3"+
		"\b\a\b\xC4\n\b\f\b\xE\b\xC7\v\b\x3\t\x3\t\x3\t\a\t\xCC\n\t\f\t\xE\t\xCF"+
		"\v\t\x3\n\x3\n\x3\n\a\n\xD4\n\n\f\n\xE\n\xD7\v\n\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xE6\n\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\a\v\x104\n\v\f"+
		"\v\xE\v\x107\v\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x10F\n\f\x3\f\a\f"+
		"\x112\n\f\f\f\xE\f\x115\v\f\x3\r\x3\r\a\r\x119\n\r\f\r\xE\r\x11C\v\r\x3"+
		"\xE\x3\xE\x6\xE\x120\n\xE\r\xE\xE\xE\x121\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x5\xF\x129\n\xF\x3\x10\x3\x10\x3\x10\x5\x10\x12E\n\x10\x3\x10\x3\x10"+
		"\x3\x11\a\x11\x133\n\x11\f\x11\xE\x11\x136\v\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x13F\n\x11\x3\x12\x3\x12\x5\x12\x143"+
		"\n\x12\x3\x12\x3\x12\x3\x12\x5\x12\x148\n\x12\x3\x13\x3\x13\x3\x13\x3"+
		"\x14\x3\x14\x5\x14\x14F\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15"+
		"\x3\x15\x5\x15\x158\n\x15\x3\x15\x5\x15\x15B\n\x15\x3\x16\x3\x16\x5\x16"+
		"\x15F\n\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\a\x17\x167\n\x17"+
		"\f\x17\xE\x17\x16A\v\x17\x3\x17\x5\x17\x16D\n\x17\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x179\n\x18\x3"+
		"\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3"+
		"\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3"+
		"%\x3%\x3%\x2\x2\x3\x14&\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2"+
		"\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2"+
		"*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2"+
		"\x44\x2\x46\x2H\x2\x2\v\x4\x2\x16\x16..\b\x2\a\a\t\t\x1E\x1E//\x32\x32"+
		"\x34\x34\x4\x2\x17\x17**\x5\x2\x4\x4\r\r\x31\x31\x5\x2\x17\x17\x19\x19"+
		"\x33\x33\x4\x2))++\x4\x2\x1B\x1B&&\x3\x2:=\x3\x2\x37\x39\x1AE\x2J\x3\x2"+
		"\x2\x2\x4P\x3\x2\x2\x2\x6\xA7\x3\x2\x2\x2\b\xA9\x3\x2\x2\x2\n\xB0\x3\x2"+
		"\x2\x2\f\xB4\x3\x2\x2\x2\xE\xC0\x3\x2\x2\x2\x10\xC8\x3\x2\x2\x2\x12\xD0"+
		"\x3\x2\x2\x2\x14\xE5\x3\x2\x2\x2\x16\x10E\x3\x2\x2\x2\x18\x116\x3\x2\x2"+
		"\x2\x1A\x11D\x3\x2\x2\x2\x1C\x128\x3\x2\x2\x2\x1E\x12D\x3\x2\x2\x2 \x134"+
		"\x3\x2\x2\x2\"\x147\x3\x2\x2\x2$\x149\x3\x2\x2\x2&\x14C\x3\x2\x2\x2(\x15A"+
		"\x3\x2\x2\x2*\x15C\x3\x2\x2\x2,\x162\x3\x2\x2\x2.\x178\x3\x2\x2\x2\x30"+
		"\x17A\x3\x2\x2\x2\x32\x17C\x3\x2\x2\x2\x34\x17E\x3\x2\x2\x2\x36\x180\x3"+
		"\x2\x2\x2\x38\x182\x3\x2\x2\x2:\x184\x3\x2\x2\x2<\x186\x3\x2\x2\x2>\x188"+
		"\x3\x2\x2\x2@\x18A\x3\x2\x2\x2\x42\x18C\x3\x2\x2\x2\x44\x18E\x3\x2\x2"+
		"\x2\x46\x190\x3\x2\x2\x2H\x192\x3\x2\x2\x2JK\x5\x4\x3\x2KL\a\x2\x2\x3"+
		"L\x3\x3\x2\x2\x2MO\x5\x6\x4\x2NM\x3\x2\x2\x2OR\x3\x2\x2\x2PN\x3\x2\x2"+
		"\x2PQ\x3\x2\x2\x2QT\x3\x2\x2\x2RP\x3\x2\x2\x2SU\x5\b\x5\x2TS\x3\x2\x2"+
		"\x2TU\x3\x2\x2\x2U\x5\x3\x2\x2\x2V\xA8\a.\x2\x2WX\x5\xE\b\x2XY\a\x10\x2"+
		"\x2YZ\x5\x12\n\x2Z\xA8\x3\x2\x2\x2[\xA8\x5\x1A\xE\x2\\\xA8\x5\n\x6\x2"+
		"]\xA8\a\"\x2\x2^_\a\x11\x2\x2_\xA8\a\x36\x2\x2`\x61\a\f\x2\x2\x61\x62"+
		"\x5\x4\x3\x2\x62\x63\a\x35\x2\x2\x63\xA8\x3\x2\x2\x2\x64\x65\a\x18\x2"+
		"\x2\x65\x66\x5\x14\v\x2\x66g\a\f\x2\x2gh\x5\x4\x3\x2hi\a\x35\x2\x2i\xA8"+
		"\x3\x2\x2\x2jk\a\x12\x2\x2kl\x5\x4\x3\x2lm\a\x1D\x2\x2mn\x5\x14\v\x2n"+
		"\xA8\x3\x2\x2\x2op\a\x1C\x2\x2pq\x5\x14\v\x2qr\a\x30\x2\x2rz\x5\x4\x3"+
		"\x2st\a%\x2\x2tu\x5\x14\v\x2uv\a\x30\x2\x2vw\x5\x4\x3\x2wy\x3\x2\x2\x2"+
		"xs\x3\x2\x2\x2y|\x3\x2\x2\x2zx\x3\x2\x2\x2z{\x3\x2\x2\x2{\x7F\x3\x2\x2"+
		"\x2|z\x3\x2\x2\x2}~\a#\x2\x2~\x80\x5\x4\x3\x2\x7F}\x3\x2\x2\x2\x7F\x80"+
		"\x3\x2\x2\x2\x80\x81\x3\x2\x2\x2\x81\x82\a\x35\x2\x2\x82\xA8\x3\x2\x2"+
		"\x2\x83\x84\a,\x2\x2\x84\x85\a\x36\x2\x2\x85\x86\a\x10\x2\x2\x86\x87\x5"+
		"\x14\v\x2\x87\x88\a\x16\x2\x2\x88\x8B\x5\x14\v\x2\x89\x8A\a\x16\x2\x2"+
		"\x8A\x8C\x5\x14\v\x2\x8B\x89\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8D\x3"+
		"\x2\x2\x2\x8D\x8E\a\f\x2\x2\x8E\x8F\x5\x4\x3\x2\x8F\x90\a\x35\x2\x2\x90"+
		"\xA8\x3\x2\x2\x2\x91\x92\a,\x2\x2\x92\x93\x5\x10\t\x2\x93\x94\a\x15\x2"+
		"\x2\x94\x95\x5\x12\n\x2\x95\x96\a\f\x2\x2\x96\x97\x5\x4\x3\x2\x97\x98"+
		"\a\x35\x2\x2\x98\xA8\x3\x2\x2\x2\x99\x9A\a(\x2\x2\x9A\x9B\x5\f\a\x2\x9B"+
		"\x9C\x5&\x14\x2\x9C\xA8\x3\x2\x2\x2\x9D\x9E\a\x3\x2\x2\x9E\x9F\a(\x2\x2"+
		"\x9F\xA0\a\x36\x2\x2\xA0\xA8\x5&\x14\x2\xA1\xA2\a\x3\x2\x2\xA2\xA5\x5"+
		"\x10\t\x2\xA3\xA4\a\x10\x2\x2\xA4\xA6\x5\x12\n\x2\xA5\xA3\x3\x2\x2\x2"+
		"\xA5\xA6\x3\x2\x2\x2\xA6\xA8\x3\x2\x2\x2\xA7V\x3\x2\x2\x2\xA7W\x3\x2\x2"+
		"\x2\xA7[\x3\x2\x2\x2\xA7\\\x3\x2\x2\x2\xA7]\x3\x2\x2\x2\xA7^\x3\x2\x2"+
		"\x2\xA7`\x3\x2\x2\x2\xA7\x64\x3\x2\x2\x2\xA7j\x3\x2\x2\x2\xA7o\x3\x2\x2"+
		"\x2\xA7\x83\x3\x2\x2\x2\xA7\x91\x3\x2\x2\x2\xA7\x99\x3\x2\x2\x2\xA7\x9D"+
		"\x3\x2\x2\x2\xA7\xA1\x3\x2\x2\x2\xA8\a\x3\x2\x2\x2\xA9\xAB\a-\x2\x2\xAA"+
		"\xAC\x5\x12\n\x2\xAB\xAA\x3\x2\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC\xAE\x3\x2"+
		"\x2\x2\xAD\xAF\a.\x2\x2\xAE\xAD\x3\x2\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF\t"+
		"\x3\x2\x2\x2\xB0\xB1\a\xF\x2\x2\xB1\xB2\a\x36\x2\x2\xB2\xB3\a\xF\x2\x2"+
		"\xB3\v\x3\x2\x2\x2\xB4\xB9\a\x36\x2\x2\xB5\xB6\a)\x2\x2\xB6\xB8\a\x36"+
		"\x2\x2\xB7\xB5\x3\x2\x2\x2\xB8\xBB\x3\x2\x2\x2\xB9\xB7\x3\x2\x2\x2\xB9"+
		"\xBA\x3\x2\x2\x2\xBA\xBE\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBC\xBD\a\x1B"+
		"\x2\x2\xBD\xBF\a\x36\x2\x2\xBE\xBC\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF"+
		"\r\x3\x2\x2\x2\xC0\xC5\x5\x16\f\x2\xC1\xC2\a\x16\x2\x2\xC2\xC4\x5\x16"+
		"\f\x2\xC3\xC1\x3\x2\x2\x2\xC4\xC7\x3\x2\x2\x2\xC5\xC3\x3\x2\x2\x2\xC5"+
		"\xC6\x3\x2\x2\x2\xC6\xF\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC8\xCD\a\x36"+
		"\x2\x2\xC9\xCA\a\x16\x2\x2\xCA\xCC\a\x36\x2\x2\xCB\xC9\x3\x2\x2\x2\xCC"+
		"\xCF\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\x11\x3\x2"+
		"\x2\x2\xCF\xCD\x3\x2\x2\x2\xD0\xD5\x5\x14\v\x2\xD1\xD2\a\x16\x2\x2\xD2"+
		"\xD4\x5\x14\v\x2\xD3\xD1\x3\x2\x2\x2\xD4\xD7\x3\x2\x2\x2\xD5\xD3\x3\x2"+
		"\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6\x13\x3\x2\x2\x2\xD7\xD5\x3\x2\x2\x2\xD8"+
		"\xD9\b\v\x1\x2\xD9\xDA\x5> \x2\xDA\xDB\x5\x14\v\t\xDB\xE6\x3\x2\x2\x2"+
		"\xDC\xE6\a\n\x2\x2\xDD\xE6\a\b\x2\x2\xDE\xE6\a$\x2\x2\xDF\xE6\x5\x46$"+
		"\x2\xE0\xE6\x5H%\x2\xE1\xE6\a \x2\x2\xE2\xE6\x5$\x13\x2\xE3\xE6\x5\x18"+
		"\r\x2\xE4\xE6\x5*\x16\x2\xE5\xD8\x3\x2\x2\x2\xE5\xDC\x3\x2\x2\x2\xE5\xDD"+
		"\x3\x2\x2\x2\xE5\xDE\x3\x2\x2\x2\xE5\xDF\x3\x2\x2\x2\xE5\xE0\x3\x2\x2"+
		"\x2\xE5\xE1\x3\x2\x2\x2\xE5\xE2\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE5\xE4"+
		"\x3\x2\x2\x2\xE6\x105\x3\x2\x2\x2\xE7\xE8\f\n\x2\x2\xE8\xE9\x5@!\x2\xE9"+
		"\xEA\x5\x14\v\n\xEA\x104\x3\x2\x2\x2\xEB\xEC\f\b\x2\x2\xEC\xED\x5<\x1F"+
		"\x2\xED\xEE\x5\x14\v\t\xEE\x104\x3\x2\x2\x2\xEF\xF0\f\a\x2\x2\xF0\xF1"+
		"\x5:\x1E\x2\xF1\xF2\x5\x14\v\b\xF2\x104\x3\x2\x2\x2\xF3\xF4\f\x6\x2\x2"+
		"\xF4\xF5\x5\x38\x1D\x2\xF5\xF6\x5\x14\v\x6\xF6\x104\x3\x2\x2\x2\xF7\xF8"+
		"\f\x5\x2\x2\xF8\xF9\x5\x36\x1C\x2\xF9\xFA\x5\x14\v\x6\xFA\x104\x3\x2\x2"+
		"\x2\xFB\xFC\f\x4\x2\x2\xFC\xFD\x5\x34\x1B\x2\xFD\xFE\x5\x14\v\x5\xFE\x104"+
		"\x3\x2\x2\x2\xFF\x100\f\x3\x2\x2\x100\x101\x5\x32\x1A\x2\x101\x102\x5"+
		"\x14\v\x4\x102\x104\x3\x2\x2\x2\x103\xE7\x3\x2\x2\x2\x103\xEB\x3\x2\x2"+
		"\x2\x103\xEF\x3\x2\x2\x2\x103\xF3\x3\x2\x2\x2\x103\xF7\x3\x2\x2\x2\x103"+
		"\xFB\x3\x2\x2\x2\x103\xFF\x3\x2\x2\x2\x104\x107\x3\x2\x2\x2\x105\x103"+
		"\x3\x2\x2\x2\x105\x106\x3\x2\x2\x2\x106\x15\x3\x2\x2\x2\x107\x105\x3\x2"+
		"\x2\x2\x108\x10F\a\x36\x2\x2\x109\x10A\a\x1A\x2\x2\x10A\x10B\x5\x14\v"+
		"\x2\x10B\x10C\a\xE\x2\x2\x10C\x10D\x5 \x11\x2\x10D\x10F\x3\x2\x2\x2\x10E"+
		"\x108\x3\x2\x2\x2\x10E\x109\x3\x2\x2\x2\x10F\x113\x3\x2\x2\x2\x110\x112"+
		"\x5 \x11\x2\x111\x110\x3\x2\x2\x2\x112\x115\x3\x2\x2\x2\x113\x111\x3\x2"+
		"\x2\x2\x113\x114\x3\x2\x2\x2\x114\x17\x3\x2\x2\x2\x115\x113\x3\x2\x2\x2"+
		"\x116\x11A\x5\x1C\xF\x2\x117\x119\x5\x1E\x10\x2\x118\x117\x3\x2\x2\x2"+
		"\x119\x11C\x3\x2\x2\x2\x11A\x118\x3\x2\x2\x2\x11A\x11B\x3\x2\x2\x2\x11B"+
		"\x19\x3\x2\x2\x2\x11C\x11A\x3\x2\x2\x2\x11D\x11F\x5\x1C\xF\x2\x11E\x120"+
		"\x5\x1E\x10\x2\x11F\x11E\x3\x2\x2\x2\x120\x121\x3\x2\x2\x2\x121\x11F\x3"+
		"\x2\x2\x2\x121\x122\x3\x2\x2\x2\x122\x1B\x3\x2\x2\x2\x123\x129\x5\x16"+
		"\f\x2\x124\x125\a\x1A\x2\x2\x125\x126\x5\x14\v\x2\x126\x127\a\xE\x2\x2"+
		"\x127\x129\x3\x2\x2\x2\x128\x123\x3\x2\x2\x2\x128\x124\x3\x2\x2\x2\x129"+
		"\x1D\x3\x2\x2\x2\x12A\x12B\x5\x44#\x2\x12B\x12C\a\x36\x2\x2\x12C\x12E"+
		"\x3\x2\x2\x2\x12D\x12A\x3\x2\x2\x2\x12D\x12E\x3\x2\x2\x2\x12E\x12F\x3"+
		"\x2\x2\x2\x12F\x130\x5\"\x12\x2\x130\x1F\x3\x2\x2\x2\x131\x133\x5\x1E"+
		"\x10\x2\x132\x131\x3\x2\x2\x2\x133\x136\x3\x2\x2\x2\x134\x132\x3\x2\x2"+
		"\x2\x134\x135\x3\x2\x2\x2\x135\x13E\x3\x2\x2\x2\x136\x134\x3\x2\x2\x2"+
		"\x137\x138\a\x6\x2\x2\x138\x139\x5\x14\v\x2\x139\x13A\a\x14\x2\x2\x13A"+
		"\x13F\x3\x2\x2\x2\x13B\x13C\x5\x42\"\x2\x13C\x13D\a\x36\x2\x2\x13D\x13F"+
		"\x3\x2\x2\x2\x13E\x137\x3\x2\x2\x2\x13E\x13B\x3\x2\x2\x2\x13F!\x3\x2\x2"+
		"\x2\x140\x142\a\x1A\x2\x2\x141\x143\x5\x12\n\x2\x142\x141\x3\x2\x2\x2"+
		"\x142\x143\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144\x148\a\xE\x2\x2\x145"+
		"\x148\x5*\x16\x2\x146\x148\x5H%\x2\x147\x140\x3\x2\x2\x2\x147\x145\x3"+
		"\x2\x2\x2\x147\x146\x3\x2\x2\x2\x148#\x3\x2\x2\x2\x149\x14A\a(\x2\x2\x14A"+
		"\x14B\x5&\x14\x2\x14B%\x3\x2\x2\x2\x14C\x14E\a\x1A\x2\x2\x14D\x14F\x5"+
		"(\x15\x2\x14E\x14D\x3\x2\x2\x2\x14E\x14F\x3\x2\x2\x2\x14F\x150\x3\x2\x2"+
		"\x2\x150\x151\a\xE\x2\x2\x151\x152\x5\x4\x3\x2\x152\x153\a\x35\x2\x2\x153"+
		"\'\x3\x2\x2\x2\x154\x157\x5\x10\t\x2\x155\x156\a\x16\x2\x2\x156\x158\a"+
		" \x2\x2\x157\x155\x3\x2\x2\x2\x157\x158\x3\x2\x2\x2\x158\x15B\x3\x2\x2"+
		"\x2\x159\x15B\a \x2\x2\x15A\x154\x3\x2\x2\x2\x15A\x159\x3\x2\x2\x2\x15B"+
		")\x3\x2\x2\x2\x15C\x15E\a\x1F\x2\x2\x15D\x15F\x5,\x17\x2\x15E\x15D\x3"+
		"\x2\x2\x2\x15E\x15F\x3\x2\x2\x2\x15F\x160\x3\x2\x2\x2\x160\x161\a\v\x2"+
		"\x2\x161+\x3\x2\x2\x2\x162\x168\x5.\x18\x2\x163\x164\x5\x30\x19\x2\x164"+
		"\x165\x5.\x18\x2\x165\x167\x3\x2\x2\x2\x166\x163\x3\x2\x2\x2\x167\x16A"+
		"\x3\x2\x2\x2\x168\x166\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169\x16C\x3"+
		"\x2\x2\x2\x16A\x168\x3\x2\x2\x2\x16B\x16D\x5\x30\x19\x2\x16C\x16B\x3\x2"+
		"\x2\x2\x16C\x16D\x3\x2\x2\x2\x16D-\x3\x2\x2\x2\x16E\x16F\a\x6\x2\x2\x16F"+
		"\x170\x5\x14\v\x2\x170\x171\a\x14\x2\x2\x171\x172\a\x10\x2\x2\x172\x173"+
		"\x5\x14\v\x2\x173\x179\x3\x2\x2\x2\x174\x175\a\x36\x2\x2\x175\x176\a\x10"+
		"\x2\x2\x176\x179\x5\x14\v\x2\x177\x179\x5\x14\v\x2\x178\x16E\x3\x2\x2"+
		"\x2\x178\x174\x3\x2\x2\x2\x178\x177\x3\x2\x2\x2\x179/\x3\x2\x2\x2\x17A"+
		"\x17B\t\x2\x2\x2\x17B\x31\x3\x2\x2\x2\x17C\x17D\a\x5\x2\x2\x17D\x33\x3"+
		"\x2\x2\x2\x17E\x17F\a!\x2\x2\x17F\x35\x3\x2\x2\x2\x180\x181\t\x3\x2\x2"+
		"\x181\x37\x3\x2\x2\x2\x182\x183\a\x13\x2\x2\x183\x39\x3\x2\x2\x2\x184"+
		"\x185\t\x4\x2\x2\x185;\x3\x2\x2\x2\x186\x187\t\x5\x2\x2\x187=\x3\x2\x2"+
		"\x2\x188\x189\t\x6\x2\x2\x189?\x3\x2\x2\x2\x18A\x18B\a\'\x2\x2\x18B\x41"+
		"\x3\x2\x2\x2\x18C\x18D\t\a\x2\x2\x18D\x43\x3\x2\x2\x2\x18E\x18F\t\b\x2"+
		"\x2\x18F\x45\x3\x2\x2\x2\x190\x191\t\t\x2\x2\x191G\x3\x2\x2\x2\x192\x193"+
		"\t\n\x2\x2\x193I\x3\x2\x2\x2$PTz\x7F\x8B\xA5\xA7\xAB\xAE\xB9\xBE\xC5\xCD"+
		"\xD5\xE5\x103\x105\x10E\x113\x11A\x121\x128\x12D\x134\x13E\x142\x147\x14E"+
		"\x157\x15A\x15E\x168\x16C\x178";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LuBox.Parser
