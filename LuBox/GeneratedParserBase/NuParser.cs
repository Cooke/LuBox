//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Development\LuBox\LuBox.Parser\Nu.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace LuBox.Parser {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class NuParser : Parser {
	public const int
		T__51=1, T__50=2, T__49=3, T__48=4, T__47=5, T__46=6, T__45=7, T__44=8, 
		T__43=9, T__42=10, T__41=11, T__40=12, T__39=13, T__38=14, T__37=15, T__36=16, 
		T__35=17, T__34=18, T__33=19, T__32=20, T__31=21, T__30=22, T__29=23, 
		T__28=24, T__27=25, T__26=26, T__25=27, T__24=28, T__23=29, T__22=30, 
		T__21=31, T__20=32, T__19=33, T__18=34, T__17=35, T__16=36, T__15=37, 
		T__14=38, T__13=39, T__12=40, T__11=41, T__10=42, T__9=43, T__8=44, T__7=45, 
		T__6=46, T__5=47, T__4=48, T__3=49, T__2=50, T__1=51, T__0=52, NAME=53, 
		NORMALSTRING=54, CHARSTRING=55, LONGSTRING=56, INT=57, HEX=58, FLOAT=59, 
		HEX_FLOAT=60, COMMENT=61, LINE_COMMENT=62, WS=63, SHEBANG=64;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'{'", "'while'", "'..'", "'::'", "'='", "'^'", "'for'", 
		"'('", "'do'", "','", "'repeat'", "'false'", "'>='", "'<'", "']'", "'#'", 
		"'function'", "'+'", "'then'", "'/'", "'elseif'", "'?:'", "'true'", "'return'", 
		"';'", "'}'", "'goto'", "'if'", "'<='", "'break'", "'local'", "'*'", "'?.'", 
		"'.'", "'...'", "':'", "'['", "'=='", "'~='", "'>'", "'or'", "'until'", 
		"'=>'", "'%'", "'in'", "'else'", "'end'", "')'", "'and'", "'nil'", "'not'", 
		"'-'", "NAME", "NORMALSTRING", "CHARSTRING", "LONGSTRING", "INT", "HEX", 
		"FLOAT", "HEX_FLOAT", "COMMENT", "LINE_COMMENT", "WS", "SHEBANG"
	};
	public const int
		RULE_chunk = 0, RULE_block = 1, RULE_stat = 2, RULE_retstat = 3, RULE_label = 4, 
		RULE_funcname = 5, RULE_varlist = 6, RULE_namelist = 7, RULE_explist = 8, 
		RULE_exp = 9, RULE_var = 10, RULE_prefixexp = 11, RULE_functioncall = 12, 
		RULE_varOrExp = 13, RULE_nameAndArgs = 14, RULE_varSuffix = 15, RULE_lambdaArgs = 16, 
		RULE_lambda = 17, RULE_args = 18, RULE_functiondef = 19, RULE_funcbody = 20, 
		RULE_parlist = 21, RULE_tableconstructor = 22, RULE_fieldlist = 23, RULE_field = 24, 
		RULE_fieldsep = 25, RULE_operatorOr = 26, RULE_operatorAnd = 27, RULE_operatorComparison = 28, 
		RULE_operatorStrcat = 29, RULE_operatorAddSub = 30, RULE_operatorMulDivMod = 31, 
		RULE_operatorUnary = 32, RULE_operatorPower = 33, RULE_dotOrQuestionMarkDot = 34, 
		RULE_colonOrQuestionMarkColon = 35, RULE_number = 36, RULE_string = 37;
	public static readonly string[] ruleNames = {
		"chunk", "block", "stat", "retstat", "label", "funcname", "varlist", "namelist", 
		"explist", "exp", "var", "prefixexp", "functioncall", "varOrExp", "nameAndArgs", 
		"varSuffix", "lambdaArgs", "lambda", "args", "functiondef", "funcbody", 
		"parlist", "tableconstructor", "fieldlist", "field", "fieldsep", "operatorOr", 
		"operatorAnd", "operatorComparison", "operatorStrcat", "operatorAddSub", 
		"operatorMulDivMod", "operatorUnary", "operatorPower", "dotOrQuestionMarkDot", 
		"colonOrQuestionMarkColon", "number", "string"
	};

	public override string GrammarFileName { get { return "Nu.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public NuParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ChunkContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(NuParser.Eof, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterChunk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitChunk(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_chunk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; block();
			State = 77; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public IReadOnlyList<StatContext> stat() {
			return GetRuleContexts<StatContext>();
		}
		public RetstatContext retstat() {
			return GetRuleContext<RetstatContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__50) | (1L << T__48) | (1L << T__45) | (1L << T__44) | (1L << T__43) | (1L << T__41) | (1L << T__35) | (1L << T__27) | (1L << T__25) | (1L << T__24) | (1L << T__22) | (1L << T__21) | (1L << NAME))) != 0)) {
				{
				{
				State = 79; stat();
				}
				}
				State = 84;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 86;
			_la = _input.La(1);
			if (_la==T__28) {
				{
				State = 85; retstat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public IReadOnlyList<ExpContext> exp() {
			return GetRuleContexts<ExpContext>();
		}
		public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(NuParser.NAME, 0); }
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public IReadOnlyList<BlockContext> block() {
			return GetRuleContexts<BlockContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_stat);
		int _la;
		try {
			State = 169;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88; Match(T__27);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89; varlist();
				State = 90; Match(T__47);
				State = 91; explist();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 93; functioncall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 94; label();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 95; Match(T__22);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 96; Match(T__25);
				State = 97; Match(NAME);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 98; Match(T__43);
				State = 99; block();
				State = 100; Match(T__5);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 102; Match(T__50);
				State = 103; exp(0);
				State = 104; Match(T__43);
				State = 105; block();
				State = 106; Match(T__5);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 108; Match(T__41);
				State = 109; block();
				State = 110; Match(T__10);
				State = 111; exp(0);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 113; Match(T__24);
				State = 114; exp(0);
				State = 115; Match(T__33);
				State = 116; block();
				State = 124;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__31) {
					{
					{
					State = 117; Match(T__31);
					State = 118; exp(0);
					State = 119; Match(T__33);
					State = 120; block();
					}
					}
					State = 126;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 129;
				_la = _input.La(1);
				if (_la==T__6) {
					{
					State = 127; Match(T__6);
					State = 128; block();
					}
				}

				State = 131; Match(T__5);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 133; Match(T__45);
				State = 134; Match(NAME);
				State = 135; Match(T__47);
				State = 136; exp(0);
				State = 137; Match(T__42);
				State = 138; exp(0);
				State = 141;
				_la = _input.La(1);
				if (_la==T__42) {
					{
					State = 139; Match(T__42);
					State = 140; exp(0);
					}
				}

				State = 143; Match(T__43);
				State = 144; block();
				State = 145; Match(T__5);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 147; Match(T__45);
				State = 148; namelist();
				State = 149; Match(T__7);
				State = 150; explist();
				State = 151; Match(T__43);
				State = 152; block();
				State = 153; Match(T__5);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 155; Match(T__35);
				State = 156; funcname();
				State = 157; funcbody();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 159; Match(T__21);
				State = 160; Match(T__35);
				State = 161; Match(NAME);
				State = 162; funcbody();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 163; Match(T__21);
				State = 164; namelist();
				State = 167;
				_la = _input.La(1);
				if (_la==T__47) {
					{
					State = 165; Match(T__47);
					State = 166; explist();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetstatContext : ParserRuleContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public RetstatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retstat; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterRetstat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitRetstat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetstat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetstatContext retstat() {
		RetstatContext _localctx = new RetstatContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_retstat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(T__28);
			State = 173;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__51) | (1L << T__44) | (1L << T__40) | (1L << T__36) | (1L << T__35) | (1L << T__29) | (1L << T__17) | (1L << T__2) | (1L << T__1) | (1L << T__0) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
				{
				State = 172; explist();
				}
			}

			State = 176;
			_la = _input.La(1);
			if (_la==T__27) {
				{
				State = 175; Match(T__27);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(NuParser.NAME, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(T__48);
			State = 179; Match(NAME);
			State = 180; Match(T__48);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		public ITerminalNode NAME(int i) {
			return GetToken(NuParser.NAME, i);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(NuParser.NAME); }
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterFuncname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitFuncname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_funcname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(NAME);
			State = 187;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__18) {
				{
				{
				State = 183; Match(T__18);
				State = 184; Match(NAME);
				}
				}
				State = 189;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 192;
			_la = _input.La(1);
			if (_la==T__16) {
				{
				State = 190; Match(T__16);
				State = 191; Match(NAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		public IReadOnlyList<VarContext> var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterVarlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitVarlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_varlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; var();
			State = 199;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__42) {
				{
				{
				State = 195; Match(T__42);
				State = 196; var();
				}
				}
				State = 201;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistContext : ParserRuleContext {
		public ITerminalNode NAME(int i) {
			return GetToken(NuParser.NAME, i);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(NuParser.NAME); }
		public NamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterNamelist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitNamelist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamelistContext namelist() {
		NamelistContext _localctx = new NamelistContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_namelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; Match(NAME);
			State = 207;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 203; Match(T__42);
					State = 204; Match(NAME);
					}
					} 
				}
				State = 209;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		public IReadOnlyList<ExpContext> exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterExplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitExplist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_explist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; exp(0);
			State = 215;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__42) {
				{
				{
				State = 211; Match(T__42);
				State = 212; exp(0);
				}
				}
				State = 217;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public IReadOnlyList<ExpContext> exp() {
			return GetRuleContexts<ExpContext>();
		}
		public OperatorAndContext operatorAnd() {
			return GetRuleContext<OperatorAndContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorStrcatContext operatorStrcat() {
			return GetRuleContext<OperatorStrcatContext>(0);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		public OperatorPowerContext operatorPower() {
			return GetRuleContext<OperatorPowerContext>(0);
		}
		public OperatorOrContext operatorOr() {
			return GetRuleContext<OperatorOrContext>(0);
		}
		public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		public FunctiondefContext functiondef() {
			return GetRuleContext<FunctiondefContext>(0);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(_ctx, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 219; operatorUnary();
				State = 220; exp(8);
				}
				break;

			case 2:
				{
				State = 222; Match(T__2);
				}
				break;

			case 3:
				{
				State = 223; Match(T__40);
				}
				break;

			case 4:
				{
				State = 224; Match(T__29);
				}
				break;

			case 5:
				{
				State = 225; number();
				}
				break;

			case 6:
				{
				State = 226; @string();
				}
				break;

			case 7:
				{
				State = 227; Match(T__17);
				}
				break;

			case 8:
				{
				State = 228; functiondef();
				}
				break;

			case 9:
				{
				State = 229; prefixexp();
				}
				break;

			case 10:
				{
				State = 230; tableconstructor();
				}
				break;

			case 11:
				{
				State = 231; lambda();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 264;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 262;
					switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
					case 1:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 234;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 235; operatorPower();
						State = 236; exp(9);
						}
						break;

					case 2:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 238;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 239; operatorMulDivMod();
						State = 240; exp(8);
						}
						break;

					case 3:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 242;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 243; operatorAddSub();
						State = 244; exp(7);
						}
						break;

					case 4:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 246;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 247; operatorStrcat();
						State = 248; exp(5);
						}
						break;

					case 5:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 250;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 251; operatorComparison();
						State = 252; exp(5);
						}
						break;

					case 6:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 254;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 255; operatorAnd();
						State = 256; exp(4);
						}
						break;

					case 7:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 258;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 259; operatorOr();
						State = 260; exp(3);
						}
						break;
					}
					} 
				}
				State = 266;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(NuParser.NAME, 0); }
		public IReadOnlyList<VarSuffixContext> varSuffix() {
			return GetRuleContexts<VarSuffixContext>();
		}
		public VarSuffixContext varSuffix(int i) {
			return GetRuleContext<VarSuffixContext>(i);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_var);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			switch (_input.La(1)) {
			case NAME:
				{
				State = 267; Match(NAME);
				}
				break;
			case T__44:
				{
				State = 268; Match(T__44);
				State = 269; exp(0);
				State = 270; Match(T__4);
				State = 271; varSuffix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 278;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 275; varSuffix();
					}
					} 
				}
				State = 280;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixexpContext : ParserRuleContext {
		public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public IReadOnlyList<NameAndArgsContext> nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public PrefixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterPrefixexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitPrefixexp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixexpContext prefixexp() {
		PrefixexpContext _localctx = new PrefixexpContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_prefixexp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 281; varOrExp();
			State = 285;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 282; nameAndArgs();
					}
					} 
				}
				State = 287;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public IReadOnlyList<NameAndArgsContext> nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterFunctioncall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitFunctioncall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_functioncall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; varOrExp();
			State = 290;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 289; nameAndArgs();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 292;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrExpContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public VarOrExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterVarOrExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitVarOrExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrExpContext varOrExp() {
		VarOrExpContext _localctx = new VarOrExpContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_varOrExp);
		try {
			State = 299;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 294; var();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 295; Match(T__44);
				State = 296; exp(0);
				State = 297; Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameAndArgsContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(NuParser.NAME, 0); }
		public ColonOrQuestionMarkColonContext colonOrQuestionMarkColon() {
			return GetRuleContext<ColonOrQuestionMarkColonContext>(0);
		}
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public NameAndArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameAndArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterNameAndArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitNameAndArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameAndArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameAndArgsContext nameAndArgs() {
		NameAndArgsContext _localctx = new NameAndArgsContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_nameAndArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			_la = _input.La(1);
			if (_la==T__30 || _la==T__16) {
				{
				State = 301; colonOrQuestionMarkColon();
				State = 302; Match(NAME);
				}
			}

			State = 306; args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSuffixContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(NuParser.NAME, 0); }
		public DotOrQuestionMarkDotContext dotOrQuestionMarkDot() {
			return GetRuleContext<DotOrQuestionMarkDotContext>(0);
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public IReadOnlyList<NameAndArgsContext> nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public VarSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterVarSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitVarSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarSuffixContext varSuffix() {
		VarSuffixContext _localctx = new VarSuffixContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_varSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__51) | (1L << T__44) | (1L << T__30) | (1L << T__16) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) {
				{
				{
				State = 308; nameAndArgs();
				}
				}
				State = 313;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 321;
			switch (_input.La(1)) {
			case T__15:
				{
				State = 314; Match(T__15);
				State = 315; exp(0);
				State = 316; Match(T__37);
				}
				break;
			case T__19:
			case T__18:
				{
				State = 318; dotOrQuestionMarkDot();
				State = 319; Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaArgsContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(NuParser.NAME, 0); }
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public LambdaArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterLambdaArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitLambdaArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaArgsContext lambdaArgs() {
		LambdaArgsContext _localctx = new LambdaArgsContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_lambdaArgs);
		try {
			State = 328;
			switch (_input.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 323; Match(NAME);
				}
				break;
			case T__44:
				EnterOuterAlt(_localctx, 2);
				{
				State = 324; Match(T__44);
				State = 325; namelist();
				State = 326; Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public LambdaArgsContext lambdaArgs() {
			return GetRuleContext<LambdaArgsContext>(0);
		}
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterLambda(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitLambda(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_lambda);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; lambdaArgs();
			State = 331; Match(T__9);
			State = 332; exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_args);
		int _la;
		try {
			State = 341;
			switch (_input.La(1)) {
			case T__44:
				EnterOuterAlt(_localctx, 1);
				{
				State = 334; Match(T__44);
				State = 336;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__51) | (1L << T__44) | (1L << T__40) | (1L << T__36) | (1L << T__35) | (1L << T__29) | (1L << T__17) | (1L << T__2) | (1L << T__1) | (1L << T__0) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
					{
					State = 335; explist();
					}
				}

				State = 338; Match(T__4);
				}
				break;
			case T__51:
				EnterOuterAlt(_localctx, 2);
				{
				State = 339; tableconstructor();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 340; @string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefContext : ParserRuleContext {
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondef; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterFunctiondef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitFunctiondef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefContext functiondef() {
		FunctiondefContext _localctx = new FunctiondefContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; Match(T__35);
			State = 344; funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncbodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		public FuncbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcbody; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterFuncbody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitFuncbody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncbodyContext funcbody() {
		FuncbodyContext _localctx = new FuncbodyContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_funcbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346; Match(T__44);
			State = 348;
			_la = _input.La(1);
			if (_la==T__17 || _la==NAME) {
				{
				State = 347; parlist();
				}
			}

			State = 350; Match(T__4);
			State = 351; block();
			State = 352; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParlistContext : ParserRuleContext {
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ParlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterParlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitParlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParlistContext parlist() {
		ParlistContext _localctx = new ParlistContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_parlist);
		int _la;
		try {
			State = 360;
			switch (_input.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 354; namelist();
				State = 357;
				_la = _input.La(1);
				if (_la==T__42) {
					{
					State = 355; Match(T__42);
					State = 356; Match(T__17);
					}
				}

				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 2);
				{
				State = 359; Match(T__17);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstructorContext : ParserRuleContext {
		public FieldlistContext fieldlist() {
			return GetRuleContext<FieldlistContext>(0);
		}
		public TableconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterTableconstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitTableconstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableconstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableconstructorContext tableconstructor() {
		TableconstructorContext _localctx = new TableconstructorContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_tableconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; Match(T__51);
			State = 364;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__51) | (1L << T__44) | (1L << T__40) | (1L << T__36) | (1L << T__35) | (1L << T__29) | (1L << T__17) | (1L << T__15) | (1L << T__2) | (1L << T__1) | (1L << T__0) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
				{
				State = 363; fieldlist();
				}
			}

			State = 366; Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		public IReadOnlyList<FieldsepContext> fieldsep() {
			return GetRuleContexts<FieldsepContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsepContext fieldsep(int i) {
			return GetRuleContext<FieldsepContext>(i);
		}
		public IReadOnlyList<FieldContext> field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterFieldlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitFieldlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_fieldlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 368; field();
			State = 374;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 369; fieldsep();
					State = 370; field();
					}
					} 
				}
				State = 376;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			}
			State = 378;
			_la = _input.La(1);
			if (_la==T__42 || _la==T__27) {
				{
				State = 377; fieldsep();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public IReadOnlyList<ExpContext> exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ITerminalNode NAME() { return GetToken(NuParser.NAME, 0); }
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_field);
		try {
			State = 390;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 380; Match(T__15);
				State = 381; exp(0);
				State = 382; Match(T__37);
				State = 383; Match(T__47);
				State = 384; exp(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 386; Match(NAME);
				State = 387; Match(T__47);
				State = 388; exp(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 389; exp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsepContext : ParserRuleContext {
		public FieldsepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsep; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterFieldsep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitFieldsep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldsep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsepContext fieldsep() {
		FieldsepContext _localctx = new FieldsepContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_fieldsep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			_la = _input.La(1);
			if ( !(_la==T__42 || _la==T__27) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOrContext : ParserRuleContext {
		public OperatorOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterOperatorOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitOperatorOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOrContext operatorOr() {
		OperatorOrContext _localctx = new OperatorOrContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_operatorOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAndContext : ParserRuleContext {
		public OperatorAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterOperatorAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitOperatorAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAndContext operatorAnd() {
		OperatorAndContext _localctx = new OperatorAndContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_operatorAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterOperatorComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitOperatorComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__39) | (1L << T__38) | (1L << T__23) | (1L << T__14) | (1L << T__13) | (1L << T__12))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorStrcatContext : ParserRuleContext {
		public OperatorStrcatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorStrcat; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterOperatorStrcat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitOperatorStrcat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorStrcat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorStrcatContext operatorStrcat() {
		OperatorStrcatContext _localctx = new OperatorStrcatContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_operatorStrcat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400; Match(T__49);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			_la = _input.La(1);
			if ( !(_la==T__34 || _la==T__0) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << T__20) | (1L << T__8))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterOperatorUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitOperatorUnary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__36) | (1L << T__1) | (1L << T__0))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorPowerContext : ParserRuleContext {
		public OperatorPowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorPower; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterOperatorPower(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitOperatorPower(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorPowerContext operatorPower() {
		OperatorPowerContext _localctx = new OperatorPowerContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_operatorPower);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408; Match(T__46);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotOrQuestionMarkDotContext : ParserRuleContext {
		public DotOrQuestionMarkDotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotOrQuestionMarkDot; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterDotOrQuestionMarkDot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitDotOrQuestionMarkDot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotOrQuestionMarkDot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotOrQuestionMarkDotContext dotOrQuestionMarkDot() {
		DotOrQuestionMarkDotContext _localctx = new DotOrQuestionMarkDotContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_dotOrQuestionMarkDot);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			_la = _input.La(1);
			if ( !(_la==T__19 || _la==T__18) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColonOrQuestionMarkColonContext : ParserRuleContext {
		public ColonOrQuestionMarkColonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colonOrQuestionMarkColon; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterColonOrQuestionMarkColon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitColonOrQuestionMarkColon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColonOrQuestionMarkColon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColonOrQuestionMarkColonContext colonOrQuestionMarkColon() {
		ColonOrQuestionMarkColonContext _localctx = new ColonOrQuestionMarkColonContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_colonOrQuestionMarkColon);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			_la = _input.La(1);
			if ( !(_la==T__30 || _la==T__16) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode HEX() { return GetToken(NuParser.HEX, 0); }
		public ITerminalNode HEX_FLOAT() { return GetToken(NuParser.HEX_FLOAT, 0); }
		public ITerminalNode INT() { return GetToken(NuParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(NuParser.FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode LONGSTRING() { return GetToken(NuParser.LONGSTRING, 0); }
		public ITerminalNode NORMALSTRING() { return GetToken(NuParser.NORMALSTRING, 0); }
		public ITerminalNode CHARSTRING() { return GetToken(NuParser.CHARSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INuListener typedListener = listener as INuListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INuVisitor<TResult> typedVisitor = visitor as INuVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 9);

		case 1: return Precpred(_ctx, 7);

		case 2: return Precpred(_ctx, 6);

		case 3: return Precpred(_ctx, 5);

		case 4: return Precpred(_ctx, 4);

		case 5: return Precpred(_ctx, 3);

		case 6: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x42\x1A5\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x3\x2\x3\x2\x3\x2\x3"+
		"\x3\a\x3S\n\x3\f\x3\xE\x3V\v\x3\x3\x3\x5\x3Y\n\x3\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4}\n\x4\f\x4\xE\x4\x80"+
		"\v\x4\x3\x4\x3\x4\x5\x4\x84\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x5\x4\x90\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\xAA\n\x4\x5\x4\xAC\n"+
		"\x4\x3\x5\x3\x5\x5\x5\xB0\n\x5\x3\x5\x5\x5\xB3\n\x5\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\a\x3\a\x3\a\a\a\xBC\n\a\f\a\xE\a\xBF\v\a\x3\a\x3\a\x5\a\xC3"+
		"\n\a\x3\b\x3\b\x3\b\a\b\xC8\n\b\f\b\xE\b\xCB\v\b\x3\t\x3\t\x3\t\a\t\xD0"+
		"\n\t\f\t\xE\t\xD3\v\t\x3\n\x3\n\x3\n\a\n\xD8\n\n\f\n\xE\n\xDB\v\n\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v"+
		"\xEB\n\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\a\v\x109\n\v\f\v\xE\v\x10C\v\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5"+
		"\f\x114\n\f\x3\f\a\f\x117\n\f\f\f\xE\f\x11A\v\f\x3\r\x3\r\a\r\x11E\n\r"+
		"\f\r\xE\r\x121\v\r\x3\xE\x3\xE\x6\xE\x125\n\xE\r\xE\xE\xE\x126\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x5\xF\x12E\n\xF\x3\x10\x3\x10\x3\x10\x5\x10\x133"+
		"\n\x10\x3\x10\x3\x10\x3\x11\a\x11\x138\n\x11\f\x11\xE\x11\x13B\v\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x144\n\x11\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x14B\n\x12\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x14\x3\x14\x5\x14\x153\n\x14\x3\x14\x3\x14\x3\x14\x5\x14\x158"+
		"\n\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x5\x16\x15F\n\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x5\x17\x168\n\x17\x3\x17\x5\x17"+
		"\x16B\n\x17\x3\x18\x3\x18\x5\x18\x16F\n\x18\x3\x18\x3\x18\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\a\x19\x177\n\x19\f\x19\xE\x19\x17A\v\x19\x3\x19\x5\x19"+
		"\x17D\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x5\x1A\x189\n\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D"+
		"\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3"+
		"$\x3%\x3%\x3&\x3&\x3\'\x3\'\x3\'\x2\x2\x3\x14(\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2"+
		":\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2\x2\v\x4\x2\f\f\x1B\x1B"+
		"\x5\x2\xF\x10\x1F\x1F(*\x4\x2\x14\x14\x36\x36\x5\x2\x16\x16\"\"..\x4\x2"+
		"\x12\x12\x35\x36\x3\x2#$\x4\x2\x18\x18&&\x3\x2;>\x3\x2\x38:\x1BE\x2N\x3"+
		"\x2\x2\x2\x4T\x3\x2\x2\x2\x6\xAB\x3\x2\x2\x2\b\xAD\x3\x2\x2\x2\n\xB4\x3"+
		"\x2\x2\x2\f\xB8\x3\x2\x2\x2\xE\xC4\x3\x2\x2\x2\x10\xCC\x3\x2\x2\x2\x12"+
		"\xD4\x3\x2\x2\x2\x14\xEA\x3\x2\x2\x2\x16\x113\x3\x2\x2\x2\x18\x11B\x3"+
		"\x2\x2\x2\x1A\x122\x3\x2\x2\x2\x1C\x12D\x3\x2\x2\x2\x1E\x132\x3\x2\x2"+
		"\x2 \x139\x3\x2\x2\x2\"\x14A\x3\x2\x2\x2$\x14C\x3\x2\x2\x2&\x157\x3\x2"+
		"\x2\x2(\x159\x3\x2\x2\x2*\x15C\x3\x2\x2\x2,\x16A\x3\x2\x2\x2.\x16C\x3"+
		"\x2\x2\x2\x30\x172\x3\x2\x2\x2\x32\x188\x3\x2\x2\x2\x34\x18A\x3\x2\x2"+
		"\x2\x36\x18C\x3\x2\x2\x2\x38\x18E\x3\x2\x2\x2:\x190\x3\x2\x2\x2<\x192"+
		"\x3\x2\x2\x2>\x194\x3\x2\x2\x2@\x196\x3\x2\x2\x2\x42\x198\x3\x2\x2\x2"+
		"\x44\x19A\x3\x2\x2\x2\x46\x19C\x3\x2\x2\x2H\x19E\x3\x2\x2\x2J\x1A0\x3"+
		"\x2\x2\x2L\x1A2\x3\x2\x2\x2NO\x5\x4\x3\x2OP\a\x2\x2\x3P\x3\x3\x2\x2\x2"+
		"QS\x5\x6\x4\x2RQ\x3\x2\x2\x2SV\x3\x2\x2\x2TR\x3\x2\x2\x2TU\x3\x2\x2\x2"+
		"UX\x3\x2\x2\x2VT\x3\x2\x2\x2WY\x5\b\x5\x2XW\x3\x2\x2\x2XY\x3\x2\x2\x2"+
		"Y\x5\x3\x2\x2\x2Z\xAC\a\x1B\x2\x2[\\\x5\xE\b\x2\\]\a\a\x2\x2]^\x5\x12"+
		"\n\x2^\xAC\x3\x2\x2\x2_\xAC\x5\x1A\xE\x2`\xAC\x5\n\x6\x2\x61\xAC\a \x2"+
		"\x2\x62\x63\a\x1D\x2\x2\x63\xAC\a\x37\x2\x2\x64\x65\a\v\x2\x2\x65\x66"+
		"\x5\x4\x3\x2\x66g\a\x31\x2\x2g\xAC\x3\x2\x2\x2hi\a\x4\x2\x2ij\x5\x14\v"+
		"\x2jk\a\v\x2\x2kl\x5\x4\x3\x2lm\a\x31\x2\x2m\xAC\x3\x2\x2\x2no\a\r\x2"+
		"\x2op\x5\x4\x3\x2pq\a,\x2\x2qr\x5\x14\v\x2r\xAC\x3\x2\x2\x2st\a\x1E\x2"+
		"\x2tu\x5\x14\v\x2uv\a\x15\x2\x2v~\x5\x4\x3\x2wx\a\x17\x2\x2xy\x5\x14\v"+
		"\x2yz\a\x15\x2\x2z{\x5\x4\x3\x2{}\x3\x2\x2\x2|w\x3\x2\x2\x2}\x80\x3\x2"+
		"\x2\x2~|\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F\x83\x3\x2\x2\x2\x80~\x3\x2\x2"+
		"\x2\x81\x82\a\x30\x2\x2\x82\x84\x5\x4\x3\x2\x83\x81\x3\x2\x2\x2\x83\x84"+
		"\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85\x86\a\x31\x2\x2\x86\xAC\x3\x2\x2"+
		"\x2\x87\x88\a\t\x2\x2\x88\x89\a\x37\x2\x2\x89\x8A\a\a\x2\x2\x8A\x8B\x5"+
		"\x14\v\x2\x8B\x8C\a\f\x2\x2\x8C\x8F\x5\x14\v\x2\x8D\x8E\a\f\x2\x2\x8E"+
		"\x90\x5\x14\v\x2\x8F\x8D\x3\x2\x2\x2\x8F\x90\x3\x2\x2\x2\x90\x91\x3\x2"+
		"\x2\x2\x91\x92\a\v\x2\x2\x92\x93\x5\x4\x3\x2\x93\x94\a\x31\x2\x2\x94\xAC"+
		"\x3\x2\x2\x2\x95\x96\a\t\x2\x2\x96\x97\x5\x10\t\x2\x97\x98\a/\x2\x2\x98"+
		"\x99\x5\x12\n\x2\x99\x9A\a\v\x2\x2\x9A\x9B\x5\x4\x3\x2\x9B\x9C\a\x31\x2"+
		"\x2\x9C\xAC\x3\x2\x2\x2\x9D\x9E\a\x13\x2\x2\x9E\x9F\x5\f\a\x2\x9F\xA0"+
		"\x5*\x16\x2\xA0\xAC\x3\x2\x2\x2\xA1\xA2\a!\x2\x2\xA2\xA3\a\x13\x2\x2\xA3"+
		"\xA4\a\x37\x2\x2\xA4\xAC\x5*\x16\x2\xA5\xA6\a!\x2\x2\xA6\xA9\x5\x10\t"+
		"\x2\xA7\xA8\a\a\x2\x2\xA8\xAA\x5\x12\n\x2\xA9\xA7\x3\x2\x2\x2\xA9\xAA"+
		"\x3\x2\x2\x2\xAA\xAC\x3\x2\x2\x2\xABZ\x3\x2\x2\x2\xAB[\x3\x2\x2\x2\xAB"+
		"_\x3\x2\x2\x2\xAB`\x3\x2\x2\x2\xAB\x61\x3\x2\x2\x2\xAB\x62\x3\x2\x2\x2"+
		"\xAB\x64\x3\x2\x2\x2\xABh\x3\x2\x2\x2\xABn\x3\x2\x2\x2\xABs\x3\x2\x2\x2"+
		"\xAB\x87\x3\x2\x2\x2\xAB\x95\x3\x2\x2\x2\xAB\x9D\x3\x2\x2\x2\xAB\xA1\x3"+
		"\x2\x2\x2\xAB\xA5\x3\x2\x2\x2\xAC\a\x3\x2\x2\x2\xAD\xAF\a\x1A\x2\x2\xAE"+
		"\xB0\x5\x12\n\x2\xAF\xAE\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB2\x3\x2"+
		"\x2\x2\xB1\xB3\a\x1B\x2\x2\xB2\xB1\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3"+
		"\t\x3\x2\x2\x2\xB4\xB5\a\x6\x2\x2\xB5\xB6\a\x37\x2\x2\xB6\xB7\a\x6\x2"+
		"\x2\xB7\v\x3\x2\x2\x2\xB8\xBD\a\x37\x2\x2\xB9\xBA\a$\x2\x2\xBA\xBC\a\x37"+
		"\x2\x2\xBB\xB9\x3\x2\x2\x2\xBC\xBF\x3\x2\x2\x2\xBD\xBB\x3\x2\x2\x2\xBD"+
		"\xBE\x3\x2\x2\x2\xBE\xC2\x3\x2\x2\x2\xBF\xBD\x3\x2\x2\x2\xC0\xC1\a&\x2"+
		"\x2\xC1\xC3\a\x37\x2\x2\xC2\xC0\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\r"+
		"\x3\x2\x2\x2\xC4\xC9\x5\x16\f\x2\xC5\xC6\a\f\x2\x2\xC6\xC8\x5\x16\f\x2"+
		"\xC7\xC5\x3\x2\x2\x2\xC8\xCB\x3\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xC9\xCA\x3"+
		"\x2\x2\x2\xCA\xF\x3\x2\x2\x2\xCB\xC9\x3\x2\x2\x2\xCC\xD1\a\x37\x2\x2\xCD"+
		"\xCE\a\f\x2\x2\xCE\xD0\a\x37\x2\x2\xCF\xCD\x3\x2\x2\x2\xD0\xD3\x3\x2\x2"+
		"\x2\xD1\xCF\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\x11\x3\x2\x2\x2\xD3\xD1"+
		"\x3\x2\x2\x2\xD4\xD9\x5\x14\v\x2\xD5\xD6\a\f\x2\x2\xD6\xD8\x5\x14\v\x2"+
		"\xD7\xD5\x3\x2\x2\x2\xD8\xDB\x3\x2\x2\x2\xD9\xD7\x3\x2\x2\x2\xD9\xDA\x3"+
		"\x2\x2\x2\xDA\x13\x3\x2\x2\x2\xDB\xD9\x3\x2\x2\x2\xDC\xDD\b\v\x1\x2\xDD"+
		"\xDE\x5\x42\"\x2\xDE\xDF\x5\x14\v\n\xDF\xEB\x3\x2\x2\x2\xE0\xEB\a\x34"+
		"\x2\x2\xE1\xEB\a\xE\x2\x2\xE2\xEB\a\x19\x2\x2\xE3\xEB\x5J&\x2\xE4\xEB"+
		"\x5L\'\x2\xE5\xEB\a%\x2\x2\xE6\xEB\x5(\x15\x2\xE7\xEB\x5\x18\r\x2\xE8"+
		"\xEB\x5.\x18\x2\xE9\xEB\x5$\x13\x2\xEA\xDC\x3\x2\x2\x2\xEA\xE0\x3\x2\x2"+
		"\x2\xEA\xE1\x3\x2\x2\x2\xEA\xE2\x3\x2\x2\x2\xEA\xE3\x3\x2\x2\x2\xEA\xE4"+
		"\x3\x2\x2\x2\xEA\xE5\x3\x2\x2\x2\xEA\xE6\x3\x2\x2\x2\xEA\xE7\x3\x2\x2"+
		"\x2\xEA\xE8\x3\x2\x2\x2\xEA\xE9\x3\x2\x2\x2\xEB\x10A\x3\x2\x2\x2\xEC\xED"+
		"\f\v\x2\x2\xED\xEE\x5\x44#\x2\xEE\xEF\x5\x14\v\v\xEF\x109\x3\x2\x2\x2"+
		"\xF0\xF1\f\t\x2\x2\xF1\xF2\x5@!\x2\xF2\xF3\x5\x14\v\n\xF3\x109\x3\x2\x2"+
		"\x2\xF4\xF5\f\b\x2\x2\xF5\xF6\x5> \x2\xF6\xF7\x5\x14\v\t\xF7\x109\x3\x2"+
		"\x2\x2\xF8\xF9\f\a\x2\x2\xF9\xFA\x5<\x1F\x2\xFA\xFB\x5\x14\v\a\xFB\x109"+
		"\x3\x2\x2\x2\xFC\xFD\f\x6\x2\x2\xFD\xFE\x5:\x1E\x2\xFE\xFF\x5\x14\v\a"+
		"\xFF\x109\x3\x2\x2\x2\x100\x101\f\x5\x2\x2\x101\x102\x5\x38\x1D\x2\x102"+
		"\x103\x5\x14\v\x6\x103\x109\x3\x2\x2\x2\x104\x105\f\x4\x2\x2\x105\x106"+
		"\x5\x36\x1C\x2\x106\x107\x5\x14\v\x5\x107\x109\x3\x2\x2\x2\x108\xEC\x3"+
		"\x2\x2\x2\x108\xF0\x3\x2\x2\x2\x108\xF4\x3\x2\x2\x2\x108\xF8\x3\x2\x2"+
		"\x2\x108\xFC\x3\x2\x2\x2\x108\x100\x3\x2\x2\x2\x108\x104\x3\x2\x2\x2\x109"+
		"\x10C\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B\x15"+
		"\x3\x2\x2\x2\x10C\x10A\x3\x2\x2\x2\x10D\x114\a\x37\x2\x2\x10E\x10F\a\n"+
		"\x2\x2\x10F\x110\x5\x14\v\x2\x110\x111\a\x32\x2\x2\x111\x112\x5 \x11\x2"+
		"\x112\x114\x3\x2\x2\x2\x113\x10D\x3\x2\x2\x2\x113\x10E\x3\x2\x2\x2\x114"+
		"\x118\x3\x2\x2\x2\x115\x117\x5 \x11\x2\x116\x115\x3\x2\x2\x2\x117\x11A"+
		"\x3\x2\x2\x2\x118\x116\x3\x2\x2\x2\x118\x119\x3\x2\x2\x2\x119\x17\x3\x2"+
		"\x2\x2\x11A\x118\x3\x2\x2\x2\x11B\x11F\x5\x1C\xF\x2\x11C\x11E\x5\x1E\x10"+
		"\x2\x11D\x11C\x3\x2\x2\x2\x11E\x121\x3\x2\x2\x2\x11F\x11D\x3\x2\x2\x2"+
		"\x11F\x120\x3\x2\x2\x2\x120\x19\x3\x2\x2\x2\x121\x11F\x3\x2\x2\x2\x122"+
		"\x124\x5\x1C\xF\x2\x123\x125\x5\x1E\x10\x2\x124\x123\x3\x2\x2\x2\x125"+
		"\x126\x3\x2\x2\x2\x126\x124\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127\x1B"+
		"\x3\x2\x2\x2\x128\x12E\x5\x16\f\x2\x129\x12A\a\n\x2\x2\x12A\x12B\x5\x14"+
		"\v\x2\x12B\x12C\a\x32\x2\x2\x12C\x12E\x3\x2\x2\x2\x12D\x128\x3\x2\x2\x2"+
		"\x12D\x129\x3\x2\x2\x2\x12E\x1D\x3\x2\x2\x2\x12F\x130\x5H%\x2\x130\x131"+
		"\a\x37\x2\x2\x131\x133\x3\x2\x2\x2\x132\x12F\x3\x2\x2\x2\x132\x133\x3"+
		"\x2\x2\x2\x133\x134\x3\x2\x2\x2\x134\x135\x5&\x14\x2\x135\x1F\x3\x2\x2"+
		"\x2\x136\x138\x5\x1E\x10\x2\x137\x136\x3\x2\x2\x2\x138\x13B\x3\x2\x2\x2"+
		"\x139\x137\x3\x2\x2\x2\x139\x13A\x3\x2\x2\x2\x13A\x143\x3\x2\x2\x2\x13B"+
		"\x139\x3\x2\x2\x2\x13C\x13D\a\'\x2\x2\x13D\x13E\x5\x14\v\x2\x13E\x13F"+
		"\a\x11\x2\x2\x13F\x144\x3\x2\x2\x2\x140\x141\x5\x46$\x2\x141\x142\a\x37"+
		"\x2\x2\x142\x144\x3\x2\x2\x2\x143\x13C\x3\x2\x2\x2\x143\x140\x3\x2\x2"+
		"\x2\x144!\x3\x2\x2\x2\x145\x14B\a\x37\x2\x2\x146\x147\a\n\x2\x2\x147\x148"+
		"\x5\x10\t\x2\x148\x149\a\x32\x2\x2\x149\x14B\x3\x2\x2\x2\x14A\x145\x3"+
		"\x2\x2\x2\x14A\x146\x3\x2\x2\x2\x14B#\x3\x2\x2\x2\x14C\x14D\x5\"\x12\x2"+
		"\x14D\x14E\a-\x2\x2\x14E\x14F\x5\x14\v\x2\x14F%\x3\x2\x2\x2\x150\x152"+
		"\a\n\x2\x2\x151\x153\x5\x12\n\x2\x152\x151\x3\x2\x2\x2\x152\x153\x3\x2"+
		"\x2\x2\x153\x154\x3\x2\x2\x2\x154\x158\a\x32\x2\x2\x155\x158\x5.\x18\x2"+
		"\x156\x158\x5L\'\x2\x157\x150\x3\x2\x2\x2\x157\x155\x3\x2\x2\x2\x157\x156"+
		"\x3\x2\x2\x2\x158\'\x3\x2\x2\x2\x159\x15A\a\x13\x2\x2\x15A\x15B\x5*\x16"+
		"\x2\x15B)\x3\x2\x2\x2\x15C\x15E\a\n\x2\x2\x15D\x15F\x5,\x17\x2\x15E\x15D"+
		"\x3\x2\x2\x2\x15E\x15F\x3\x2\x2\x2\x15F\x160\x3\x2\x2\x2\x160\x161\a\x32"+
		"\x2\x2\x161\x162\x5\x4\x3\x2\x162\x163\a\x31\x2\x2\x163+\x3\x2\x2\x2\x164"+
		"\x167\x5\x10\t\x2\x165\x166\a\f\x2\x2\x166\x168\a%\x2\x2\x167\x165\x3"+
		"\x2\x2\x2\x167\x168\x3\x2\x2\x2\x168\x16B\x3\x2\x2\x2\x169\x16B\a%\x2"+
		"\x2\x16A\x164\x3\x2\x2\x2\x16A\x169\x3\x2\x2\x2\x16B-\x3\x2\x2\x2\x16C"+
		"\x16E\a\x3\x2\x2\x16D\x16F\x5\x30\x19\x2\x16E\x16D\x3\x2\x2\x2\x16E\x16F"+
		"\x3\x2\x2\x2\x16F\x170\x3\x2\x2\x2\x170\x171\a\x1C\x2\x2\x171/\x3\x2\x2"+
		"\x2\x172\x178\x5\x32\x1A\x2\x173\x174\x5\x34\x1B\x2\x174\x175\x5\x32\x1A"+
		"\x2\x175\x177\x3\x2\x2\x2\x176\x173\x3\x2\x2\x2\x177\x17A\x3\x2\x2\x2"+
		"\x178\x176\x3\x2\x2\x2\x178\x179\x3\x2\x2\x2\x179\x17C\x3\x2\x2\x2\x17A"+
		"\x178\x3\x2\x2\x2\x17B\x17D\x5\x34\x1B\x2\x17C\x17B\x3\x2\x2\x2\x17C\x17D"+
		"\x3\x2\x2\x2\x17D\x31\x3\x2\x2\x2\x17E\x17F\a\'\x2\x2\x17F\x180\x5\x14"+
		"\v\x2\x180\x181\a\x11\x2\x2\x181\x182\a\a\x2\x2\x182\x183\x5\x14\v\x2"+
		"\x183\x189\x3\x2\x2\x2\x184\x185\a\x37\x2\x2\x185\x186\a\a\x2\x2\x186"+
		"\x189\x5\x14\v\x2\x187\x189\x5\x14\v\x2\x188\x17E\x3\x2\x2\x2\x188\x184"+
		"\x3\x2\x2\x2\x188\x187\x3\x2\x2\x2\x189\x33\x3\x2\x2\x2\x18A\x18B\t\x2"+
		"\x2\x2\x18B\x35\x3\x2\x2\x2\x18C\x18D\a+\x2\x2\x18D\x37\x3\x2\x2\x2\x18E"+
		"\x18F\a\x33\x2\x2\x18F\x39\x3\x2\x2\x2\x190\x191\t\x3\x2\x2\x191;\x3\x2"+
		"\x2\x2\x192\x193\a\x5\x2\x2\x193=\x3\x2\x2\x2\x194\x195\t\x4\x2\x2\x195"+
		"?\x3\x2\x2\x2\x196\x197\t\x5\x2\x2\x197\x41\x3\x2\x2\x2\x198\x199\t\x6"+
		"\x2\x2\x199\x43\x3\x2\x2\x2\x19A\x19B\a\b\x2\x2\x19B\x45\x3\x2\x2\x2\x19C"+
		"\x19D\t\a\x2\x2\x19DG\x3\x2\x2\x2\x19E\x19F\t\b\x2\x2\x19FI\x3\x2\x2\x2"+
		"\x1A0\x1A1\t\t\x2\x2\x1A1K\x3\x2\x2\x2\x1A2\x1A3\t\n\x2\x2\x1A3M\x3\x2"+
		"\x2\x2%TX~\x83\x8F\xA9\xAB\xAF\xB2\xBD\xC2\xC9\xD1\xD9\xEA\x108\x10A\x113"+
		"\x118\x11F\x126\x12D\x132\x139\x143\x14A\x152\x157\x15E\x167\x16A\x16E"+
		"\x178\x17C\x188";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LuBox.Parser
